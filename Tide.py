import numpy as np
"""5天到18.6年的固体地球待谐潮汐项处理"""

"""
MJD = JD - 2400000.5
TT = (JD - 2451545) / 36525 = (MJD - 51544.5) / 36525
"""
# 计算潮汐项的函数

def MOD(x: np.ndarray, y):
    return x - y * (x / y).astype(int)


def FUNDARG(T: np.ndarray):
    """
    T: TT Julian centuries since J2000.0
    """
    L, LP, F, D, OM = 0.0, 0.0, 0.0, 0.0, 0.0
    # Arcseconds to radians
    DAS2R = 4.848136811095359935899141e-6
    # Arcseconds in a full circle: 360*60*60
    TURNAS = 1296000e0
    # 2 * pi
    D2PI = 6.283185307179586476925287e0
    # L, mean anomaly of the Moon
    L = (
        MOD(
            485868.249036e0
            + T * (1717915923.2178e0 + T * (31.8792e0 + T * (0.051635e0 + T * (-0.00024470e0)))),
            TURNAS,
        )
        * DAS2R
    )
    # LP, mean anomaly of the Sun
    LP = (
        MOD(
            1287104.79305e0
            + T * (129596581.0481e0 + T * (-0.5532e0 + T * (0.000136e0 + T * (-0.00001149e0)))),
            TURNAS,
        )
        * DAS2R
    )
    # F, L - OM
    F = (
        MOD(
            335779.526232e0
            + T * (1739527262.8478e0 + T * (-12.7512e0 + T * (-0.001037e0 + T * (0.00000417e0)))),
            TURNAS,
        )
        * DAS2R
    )
    # D, mean elongation of the Moon from the Sun
    D = (
        MOD(
            1072260.70369e0
            + T * (1602961601.2090e0 + T * (-6.3706e0 + T * (0.006593e0 + T * (-0.00003169e0)))),
            TURNAS,
        )
        * DAS2R
    )
    # OM, mean longitude of the ascending node of the Moon
    OM = (
        MOD(
            450160.398036e0
            + T * (-6962890.5431e0 + T * (7.4722e0 + T * (0.007702e0 + T * (-0.00005939e0)))),
            TURNAS,
        )
        * DAS2R
    )
    return L, LP, F, D, OM


def RG_ZONT2(MJD: np.ndarray):
    DUT, DLOD, DOMEGA, ARG = 0.0, 0.0, 0.0, 0.0
    DAS2R = 4.848136811095359935899141e-6
    TURNAS = 1296000e0
    D2PI = 6.283185307179586476925287e0
    NZONT = 62
    # fmt:off
    NFUND = np.array([
        [ 1,  0,  2,  2,  2, ],
        [ 2,  0,  2,  0,  1, ],
        [ 2,  0,  2,  0,  2, ],
        [ 0,  0,  2,  2,  1, ],
        [ 0,  0,  2,  2,  2, ],
        [ 1,  0,  2,  0,  0, ],
        [ 1,  0,  2,  0,  1, ],
        [ 1,  0,  2,  0,  2, ],
        [ 3,  0,  0,  0,  0, ],
        [-1,  0,  2,  2,  1, ],
        [-1,  0,  2,  2,  2, ],
        [ 1,  0,  0,  2,  0, ],
        [ 2,  0,  2, -2,  2, ],
        [ 0,  1,  2,  0,  2, ],
        [ 0,  0,  2,  0,  0, ],
        [ 0,  0,  2,  0,  1, ],
        [ 0,  0,  2,  0,  2, ],
        [ 2,  0,  0,  0, -1, ],
        [ 2,  0,  0,  0,  0, ],
        [ 2,  0,  0,  0,  1, ],
        [ 0, -1,  2,  0,  2, ],
        [ 0,  0,  0,  2, -1, ],
        [ 0,  0,  0,  2,  0, ],
        [ 0,  0,  0,  2,  1, ],
        [ 0, -1,  0,  2,  0, ],
        [ 1,  0,  2, -2,  1, ],
        [ 1,  0,  2, -2,  2, ],
        [ 1,  1,  0,  0,  0, ],
        [-1,  0,  2,  0,  0, ],
        [-1,  0,  2,  0,  1, ],
        [-1,  0,  2,  0,  2, ],
        [ 1,  0,  0,  0, -1, ],
        [ 1,  0,  0,  0,  0, ],
        [ 1,  0,  0,  0,  1, ],
        [ 0,  0,  0,  1,  0, ],
        [ 1, -1,  0,  0,  0, ],
        [-1,  0,  0,  2, -1, ],
        [-1,  0,  0,  2,  0, ],
        [-1,  0,  0,  2,  1, ],
        [ 1,  0, -2,  2, -1, ],
        [-1, -1,  0,  2,  0, ],
        [ 0,  2,  2, -2,  2, ],
        [ 0,  1,  2, -2,  1, ],
        [ 0,  1,  2, -2,  2, ],
        [ 0,  0,  2, -2,  0, ],
        [ 0,  0,  2, -2,  1, ],
        [ 0,  0,  2, -2,  2, ],
        [ 0,  2,  0,  0,  0, ],
        [ 2,  0,  0, -2, -1, ],
        [ 2,  0,  0, -2,  0, ],
        [ 2,  0,  0, -2,  1, ],
        [ 0, -1,  2, -2,  1, ],
        [ 0,  1,  0,  0, -1, ],
        [ 0, -1,  2, -2,  2, ],
        [ 0,  1,  0,  0,  0, ],
        [ 0,  1,  0,  0,  1, ],
        [ 1,  0,  0, -1,  0, ],
        [ 2,  0, -2,  0,  0, ],
        [-2,  0,  2,  0,  1, ],
        [-1,  1,  0,  1,  0, ],
        [ 0,  0,  0,  0,  2, ],
        [ 0,  0,  0,  0,  1, ],
    ])
    TIDE = np.array([
        [   -0.0235e0, 0.0000e0,  0.2617e0, 0.0000e0,  -0.2209e0,  0.0000e0,],
        [   -0.0404e0, 0.0000e0,  0.3706e0, 0.0000e0,  -0.3128e0,  0.0000e0,],
        [   -0.0987e0, 0.0000e0,  0.9041e0, 0.0000e0,  -0.7630e0,  0.0000e0,],
        [   -0.0508e0, 0.0000e0,  0.4499e0, 0.0000e0,  -0.3797e0,  0.0000e0,],
        [   -0.1231e0, 0.0000e0,  1.0904e0, 0.0000e0,  -0.9203e0,  0.0000e0,],
        [   -0.0385e0, 0.0000e0,  0.2659e0, 0.0000e0,  -0.2244e0,  0.0000e0,],
        [   -0.4108e0, 0.0000e0,  2.8298e0, 0.0000e0,  -2.3884e0,  0.0000e0,],
        [   -0.9926e0, 0.0000e0,  6.8291e0, 0.0000e0,  -5.7637e0,  0.0000e0,],
        [   -0.0179e0, 0.0000e0,  0.1222e0, 0.0000e0,  -0.1031e0,  0.0000e0,],
        [   -0.0818e0, 0.0000e0,  0.5384e0, 0.0000e0,  -0.4544e0,  0.0000e0,],
        [   -0.1974e0, 0.0000e0,  1.2978e0, 0.0000e0,  -1.0953e0,  0.0000e0,],
        [   -0.0761e0, 0.0000e0,  0.4976e0, 0.0000e0,  -0.4200e0,  0.0000e0,],
        [    0.0216e0, 0.0000e0, -0.1060e0, 0.0000e0,   0.0895e0,  0.0000e0,],
        [    0.0254e0, 0.0000e0, -0.1211e0, 0.0000e0,   0.1022e0,  0.0000e0,],
        [   -0.2989e0, 0.0000e0,  1.3804e0, 0.0000e0,  -1.1650e0,  0.0000e0,],
        [   -3.1873e0, 0.2010e0, 14.6890e0, 0.9266e0, -12.3974e0, -0.7820e0,],
        [   -7.8468e0, 0.5320e0, 36.0910e0, 2.4469e0, -30.4606e0, -2.0652e0,],
        [    0.0216e0, 0.0000e0, -0.0988e0, 0.0000e0,   0.0834e0,  0.0000e0,],
        [   -0.3384e0, 0.0000e0,  1.5433e0, 0.0000e0,  -1.3025e0,  0.0000e0,],
        [    0.0179e0, 0.0000e0, -0.0813e0, 0.0000e0,   0.0686e0,  0.0000e0,],
        [   -0.0244e0, 0.0000e0,  0.1082e0, 0.0000e0,  -0.0913e0,  0.0000e0,],
        [    0.0470e0, 0.0000e0, -0.2004e0, 0.0000e0,   0.1692e0,  0.0000e0,],
        [   -0.7341e0, 0.0000e0,  3.1240e0, 0.0000e0,  -2.6367e0,  0.0000e0,],
        [   -0.0526e0, 0.0000e0,  0.2235e0, 0.0000e0,  -0.1886e0,  0.0000e0,],
        [   -0.0508e0, 0.0000e0,  0.2073e0, 0.0000e0,  -0.1749e0,  0.0000e0,],
        [    0.0498e0, 0.0000e0, -0.1312e0, 0.0000e0,   0.1107e0,  0.0000e0,],
        [    0.1006e0, 0.0000e0, -0.2640e0, 0.0000e0,   0.2228e0,  0.0000e0,],
        [    0.0395e0, 0.0000e0, -0.0968e0, 0.0000e0,   0.0817e0,  0.0000e0,],
        [    0.0470e0, 0.0000e0, -0.1099e0, 0.0000e0,   0.0927e0,  0.0000e0,],
        [    0.1767e0, 0.0000e0, -0.4115e0, 0.0000e0,   0.3473e0,  0.0000e0,],
        [    0.4352e0, 0.0000e0, -1.0093e0, 0.0000e0,   0.8519e0,  0.0000e0,],
        [    0.5339e0, 0.0000e0, -1.2224e0, 0.0000e0,   1.0317e0,  0.0000e0,],
        [   -8.4046e0, 0.2500e0, 19.1647e0, 0.5701e0, -16.1749e0, -0.4811e0,],
        [    0.5443e0, 0.0000e0, -1.2360e0, 0.0000e0,   1.0432e0,  0.0000e0,],
        [    0.0470e0, 0.0000e0, -0.1000e0, 0.0000e0,   0.0844e0,  0.0000e0,],
        [   -0.0555e0, 0.0000e0,  0.1169e0, 0.0000e0,  -0.0987e0,  0.0000e0,],
        [    0.1175e0, 0.0000e0, -0.2332e0, 0.0000e0,   0.1968e0,  0.0000e0,],
        [   -1.8236e0, 0.0000e0,  3.6018e0, 0.0000e0,  -3.0399e0,  0.0000e0,],
        [    0.1316e0, 0.0000e0, -0.2587e0, 0.0000e0,   0.2183e0,  0.0000e0,],
        [    0.0179e0, 0.0000e0, -0.0344e0, 0.0000e0,   0.0290e0,  0.0000e0,],
        [   -0.0855e0, 0.0000e0,  0.1542e0, 0.0000e0,  -0.1302e0,  0.0000e0,],
        [   -0.0573e0, 0.0000e0,  0.0395e0, 0.0000e0,  -0.0333e0,  0.0000e0,],
        [    0.0329e0, 0.0000e0, -0.0173e0, 0.0000e0,   0.0146e0,  0.0000e0,],
        [   -1.8847e0, 0.0000e0,  0.9726e0, 0.0000e0,  -0.8209e0,  0.0000e0,],
        [    0.2510e0, 0.0000e0, -0.0910e0, 0.0000e0,   0.0768e0,  0.0000e0,],
        [    1.1703e0, 0.0000e0, -0.4135e0, 0.0000e0,   0.3490e0,  0.0000e0,],
        [  -49.7174e0, 0.4330e0, 17.1056e0, 0.1490e0, -14.4370e0, -0.1257e0,],
        [   -0.1936e0, 0.0000e0,  0.0666e0, 0.0000e0,  -0.0562e0,  0.0000e0,],
        [    0.0489e0, 0.0000e0, -0.0154e0, 0.0000e0,   0.0130e0,  0.0000e0,],
        [   -0.5471e0, 0.0000e0,  0.1670e0, 0.0000e0,  -0.1409e0,  0.0000e0,],
        [    0.0367e0, 0.0000e0, -0.0108e0, 0.0000e0,   0.0092e0,  0.0000e0,],
        [   -0.0451e0, 0.0000e0,  0.0082e0, 0.0000e0,  -0.0069e0,  0.0000e0,],
        [    0.0921e0, 0.0000e0, -0.0167e0, 0.0000e0,   0.0141e0,  0.0000e0,],
        [    0.8281e0, 0.0000e0, -0.1425e0, 0.0000e0,   0.1202e0,  0.0000e0,],
        [  -15.8887e0, 0.1530e0,  2.7332e0, 0.0263e0,  -2.3068e0, -0.0222e0,],
        [   -0.1382e0, 0.0000e0,  0.0225e0, 0.0000e0,  -0.0190e0,  0.0000e0,],
        [    0.0348e0, 0.0000e0, -0.0053e0, 0.0000e0,   0.0045e0,  0.0000e0,],
        [   -0.1372e0, 0.0000e0, -0.0079e0, 0.0000e0,   0.0066e0,  0.0000e0,],
        [    0.4211e0, 0.0000e0, -0.0203e0, 0.0000e0,   0.0171e0,  0.0000e0,],
        [   -0.0404e0, 0.0000e0,  0.0008e0, 0.0000e0,  -0.0007e0,  0.0000e0,],
        [    7.8998e0, 0.0000e0,  0.1460e0, 0.0000e0,  -0.1232e0,  0.0000e0,],
        [-1617.2681e0, 0.0000e0, -14.9471e0,0.0000e0,  12.6153e0,  0.0000e0,],
    ])
    # fmt:on
    T = (MJD - 51544.5) / 36525
    L, LP, F, D, OM = FUNDARG(T)
    # DLOD
    DLOD = 0.0e0
    for i in range(0, NZONT):
        # ξ_i = Σ a_ij * α_j
        ARG = MOD(
            (NFUND[i, 0]) * L
            + (NFUND[i, 1]) * LP
            + (NFUND[i, 2]) * F
            + (NFUND[i, 3]) * D
            + (NFUND[i, 4]) * OM,
            D2PI,
        )
        ARG = np.where(ARG < 0.0, ARG + D2PI, ARG)
        DLOD += TIDE[i, 2] * np.cos(ARG) + TIDE[i, 3] * np.sin(ARG)
    return DLOD * 1.0e-5